<%#
# Edit

This view is the template for the edit page.

It displays a header, and renders the `_form` partial to do the heavy lifting.

## Local variables:

- `page`:
An instance of [Administrate::Page::Form][1].
Contains helper methods to help display a form,
and knows which attributes should be displayed in the resource's form.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Page/Form
%>

<% content_for(:title) { t("administrate.actions.edit_resource", name: page.page_title) } %>

<header class="main-content__header" role="banner">
  <h1 class="main-content__page-title">
    <%= content_for(:title) %>
  </h1>

  <div>
    <%= link_to(
    t("administrate.actions.show_resource", name: page.page_title),
    [namespace, page.resource],
    class: "button",
    ) if valid_action?(:show) && show_action?(:show, page.resource) %>
  </div>
</header>

<section class="main-content__body">
  <%= form_for([namespace, page.resource], html: { class: "form" }) do |f| %>
  <% if page.resource.errors.any? %>
  <div id="error_explanation">
    <h2>
      <%= t(
      "administrate.form.errors",
      pluralized_errors: pluralize(page.resource.errors.count, t("administrate.form.error")),
      resource_name: display_resource_name(page.resource_name)
      ) %>
    </h2>

    <ul>
      <% page.resource.errors.full_messages.each do |message| %>
      <li class="flash-error"><%= message %></li>
      <% end %>
    </ul>
  </div>
  <% end %>

  <% page.attributes.each do |attribute| -%>
  <div class="field-unit field-unit--<%= attribute.html_class %>" style="height:100px;">
    <% if page.resource.class == News && attribute.attribute != :visible && attribute.data.present? then %>
    <div class="field-unit__label">
      <%= f.label attribute.attribute %>
    </div>
    <div class="field-unit__field" >
      <%= attribute.data %>
    </div>
    <% else %>
    <%= render_field attribute, f: f %>
    <% end %>
  </div>
  <% end -%>

  <div class="form-actions">
    <%= f.submit %>
  </div>
  <% end %>
</section>
